package Emus;

import java.text.DecimalFormat;

import MyMatch.EmusDeff;
import MyMatch.Setings;

/* To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor. */
/**
 *
 * @author Terran
 */
public class INC extends EmusDeff {

	private class Controller extends EmusDeff.Controller {
		private static DecimalFormat	UPf					= new DecimalFormat("+000.000");
		private static DecimalFormat	Zf					= new DecimalFormat("+0000.000");

		public Controller() {
			super(10, "ИНС");
		}

		@Override
		protected String getStrToBoard() {
			if (mode != Mode.UNDEFENDED) {
				return df2.format(val / 1_000.0);
			} else {
				return "9999999";
			}
		}

		protected String getUP() {
			if (mode == Mode.UNDEFENDED) {
				return "XXX_XXX";
			} else {
				return UPf.format(val / 1_000.0);
			}
		}
		protected String getZ() {
			if (mode == Mode.UNDEFENDED) {
				return "XXX_XXX";
			} else {
				return Zf.format(val / 1_000.0);
			}
		}
	}

	/**
	 *
	 */
	private static final long		serialVersionUID	= 1L;

	private static DecimalFormat	df2					= new DecimalFormat("+00.000");

	// End of variables declaration//GEN-END:variables

	public INC(Setings Se) {
		super(Se, "INC", 1000);
		addContr(1, 0, 10, 8);
	}

	@Override
	protected void firstStep() {
		/*TextList.removeAll();
		deviseVector.removeAllElements();
		for (int i = 0; i < numKontr; i++) {
			String num = "";
			Controller[] a = new Controller[10];
			for (int j = 0; j < a.length; j++) {
				a[j] = new Controller();
			}
			if (i + 1 < 10) {
				num = "0" + (i + 1);
			} else {
				num = "" + (i + 1);
			}

			String name = "ИНС_" + num + ".__";
			for (int j = 0; j < a.length; j++) {
				if (i * a.length + j + 1 < 10) {
					num = "00" + (i * a.length + j + 1);
				} else
					if (i * a.length + j + 1 < 100) {
						num = "0" + (i * a.length + j + 1);
					} else {
						num = "" + (i * a.length + j + 1);
					}
				name += num + "=000.000_";
			}
			deviseVector.add(a);
			TextList.add(name);
		}*/
	}

	@Override
	protected Controller getController(int numContr, int numPart) {
		return new Controller();
	}

	@Override
	protected void msgIn(String data_S, String string_H) {
		println("In" + data_S);
		String req[] = data_S.split("");
		String data = "";
		int num = Integer.parseInt(req[1] + req[2]);
		String Fun = req[3];
		if (req[0].contains("$") & num - startContr < numKontr) {
			println("Контроллер = " + num + " приказ = " + Fun);
			switch (Fun) {
				case "U":
					data = ">" + String.format("%02X", num);
					for(var i : getDevise(num)) {
						data += ((Controller)i).getUP();
					}
					break;
				case "P":
					data = ">" + String.format("%02X", num);
					for(var i : getDevise(num)) {
						data += ((Controller)i).getUP();
					}
					break;
				case "Z":
					data = ">" + String.format("%02X", num);
					for(var i : getDevise(num)) {
						data += ((Controller)i).getZ();
					}
					break;
				case "F":
					println("Приказ установить частоту = " + Integer.parseInt(req[4] + req[5]) + "Гц");
					data = "!" + String.format("%02X", num);
					break;
				case "R":
					println("Приказ на перезагрузку ");
					data = "";
					return;
				default:
					println("Неизвестный приказ");
					data = " ";
					break;
			}
			req = data.split("");
			byte crc = 0;
			for (String element : req) {
				crc += element.charAt(0);
			}
			data += ((((int)crc) & 0xFF) < 16 ? "0" : "") + Integer.toHexString(((int)crc) & 0xFF);
			data += '\0';
			writeString(data);
			println("Out " + data);
		} else {
			writeString(" ");
		}

	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	@Override
	protected void newInitComponents() {
	}// </editor-fold>//GEN-END:initComponents

	@Override
	protected void newStep() {
		regenerateControllerValue();
	}
}
