package Emus;

import MyMatch.EmusDeff;
import MyMatch.MyMatch;
import MyMatch.Setings;

/* To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor. */
/**
 *
 * @author Terran
 */
public class BISI extends EmusDeff {
	private class Controller extends EmusDeff.Controller {

		public Controller() {
			super(1000, "БИСИ");
		}

		@Override
		protected String getStrToBoard() {
			if (mode == Mode.UNDEFENDED) {
				return "XXXX_XXXX";
			} else {
				return toStrWithZero(Integer.toHexString((int) val).toUpperCase(), 8);
			}
		}
	}

	public BISI(Setings Se) {
		super(Se, "БИСИ", 1000);
		numKontr = 1;
		addContr(1, 0, 16, 8);
	}

	// End of variables declaration//GEN-END:variables
	@Override
	protected void firstStep() {
	}

	@Override
	protected Controller getController(int numContr, int numPart) {
		return new Controller();
	}

	@Override
	protected void msgIn(String data_S, String string_H) {
		println("In " + string_H);
		String bytes[] = string_H.split(" ");
		if (bytes.length < 8) { return; }
		String data = "";
		int num = Integer.parseInt(bytes[0], 16);
		print("Номер устройства: " + num + " (" + (num + 1) / 2 + "/" + ((num + 1) % 2 + 1) + ")");
		int fun = Integer.parseInt(bytes[1], 16);
		print(", функция: " + fun);
		int plata = Integer.parseInt(bytes[2] + bytes[3], 16);
		if (plata == 0) {
			print(", плата 1");
		} else {
			print(", плата 2");
		}
		int numByte = Integer.parseInt(bytes[4] + bytes[5], 16);
		print(", ожидается " + numByte + " бит");
		println(", CRC " + bytes[6] + bytes[7]);
		if ((num + 1) / 2 - 1 <= numKontr) {
			byte array1[] = new byte[37];
			array1[0] = (byte) num;
			array1[1] = (byte) fun;
			array1[3] = (byte) 32;
			int i = 0;
			plata /= 2;
			for (int kk = 0; kk < deviseVector.get((num + 1) / 2 - 1).length; kk++) {
				if (plata > 0) {
					plata--;
					continue;
				}
				Controller con = (Controller) deviseVector.get((num + 1) / 2 - 1)[kk];
				con.step();
				String ret = con.getStrToBoard();
				String rets[] = ret.split("");
				array1[3 + i * 4 + 0] = (byte) Integer.parseInt(rets[7 - 3] + rets[7 - 2], 16);
				array1[3 + i * 4 + 1] = (byte) Integer.parseInt(rets[7 - 1] + rets[7 - 0], 16);
				array1[3 + i * 4 + 2] = (byte) Integer.parseInt(rets[7 - 7] + rets[7 - 6], 16);
				array1[3 + i * 4 + 3] = (byte) Integer.parseInt(rets[7 - 5] + rets[7 - 4], 16);
				i++;
				if (i > 7) {
					break;
				}
			}
			int[] crc = MyMatch.calculateCRC(array1, 0, array1.length - 2);
			array1[array1.length - 2] = (byte) crc[0]; // CRC
			array1[array1.length - 1] = (byte) crc[1];
			writeBytes(array1);
			for (byte element : array1) {
				data += " " + toStrWithZero(Integer.toHexString(element).toUpperCase(), 2);// String.format("%02X ", element);
			}
		}
		println("Out " + data);

	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	@Override
	protected void newInitComponents() {
	}// </editor-fold>//GEN-END:initComponents

	@Override
	protected void newStep() {
		regenerateControllerValue();
	}
}
