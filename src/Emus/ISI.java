package Emus;

import MyMatch.EmusDeff;
import MyMatch.MyMatch;
import MyMatch.Setings;

/* To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor. */
/**
 *
 * @author Terran
 */
public class ISI extends EmusDeff {

	private class Controller extends EmusDeff.Controller {

		public Controller() {
			super(1000, "ИСИ");
		}

		@Override
		protected String getStrToBoard() {
			if (mode == Mode.UNDEFENDED) {
				return "XXXX_XXXX";
			} else {
				return toStrWithZero(Integer.toHexString((int) val).toUpperCase(), 8);
			}
		}
	}

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;

	public ISI(Setings Se) {
		super(Se, "ИСИ", 1000);
		addContr(1, 0, 8, 8);
	}

	@Override
	protected void firstStep() {

	}

	@Override
	protected Controller getController(int numContr, int numPart) {
		return new Controller();
	}

	@Override
	protected void msgIn(String data_S, String string_H) {
		print("In " + data_S);
		String bytes[] = data_S.split("");
		byte array_h[] = new byte[5];
		for (int i = 0; i < 10; i += 2) {
			array_h[i / 2] = (byte) Integer.parseInt(bytes[1 + i] + bytes[1 + i + 1], 16);
		}
		byte crc = (byte) -MyMatch.calculateCRC_Sum(array_h, 0, array_h.length - 1);

		if (bytes.length != 11 + 2) { return; }
		if (!bytes[0].equals(":")) {
			println("Символ начала сообщения не :, а " + bytes[0]);
		}
		int num = Integer.parseInt(bytes[1] + bytes[2], 16);
		print("Номер устройства: " + num);
		int fun = Integer.parseInt(bytes[3] + bytes[4], 16);
		print(", функция: " + fun);
		int syze = Integer.parseInt(bytes[5] + bytes[6], 16);
		print(", размер: " + syze);
		int datain = Integer.parseInt(bytes[7] + bytes[8], 16);
		print(", данные: " + datain);
		if (crc != (byte) Integer.parseInt(bytes[9] + bytes[10], 16)) {
			println(", crc не совпал!: 0x" + bytes[9] + bytes[10] + "вместо 0х" + toStrWithZero(Integer.toHexString(crc).toUpperCase(), 2));
		} else {
			println(", crc: 0x" + bytes[9] + bytes[10]);
		}

		byte array1[] = new byte[148];
		array1[0] = (byte) num;
		array1[1] = (byte) fun;
		array1[2] = (byte) 32;
		crc = (byte) -MyMatch.calculateCRC_Sum(array1, 0, array1.length - 1);
		array1[array1.length - 1] = crc;
		String data = ":";
		for (byte element : array1) {
			data += toStrWithZero(Integer.toHexString(element).toUpperCase(), 2);// String.format("%02X ", element);
		}
		data += "\n\r";
		writeString(data);
		print("Out " + data);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	@Override
	protected void newInitComponents() {

	}// </editor-fold>//GEN-END:initComponents

	@Override
	protected void newStep() {
		regenerateControllerValue();
	}
}
