package Emus;

import java.util.ArrayList;

import javax.swing.JOptionPane;

import MyMatch.EmusDeff;
import MyMatch.Setings;

/* To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor. */
/**
 *
 * @author Terran
 */
public class REPEATER extends EmusDeff {

	private class Controller extends EmusDeff.Controller {
		String in;
		String out;
		boolean in_String;
		boolean out_String;

		public Controller(String i, String o, boolean iS, boolean oS) {
			super(10, "Повторитель");
			in = i;
			out = o;
			in_String = iS;
			out_String = oS;
		}

		@Override
		protected String getStrToBoard() {
			return in + " -> " + out;
		}
	}
	private ArrayList <Controller> controllers = new ArrayList<>();

	/**
	 *
	 */
	private static final long		serialVersionUID	= 1L;

	// End of variables declaration//GEN-END:variables

	public REPEATER(Setings Se) {
		super(Se, "Повторитель", 1000);

		var nMenu = new javax.swing.JMenuItem();
		nMenu.setText("Новый повторитель");
		nMenu.addActionListener(e->newControl());
		MenuRaw.add(nMenu);
		

		try {
			var count = Se.getInt("REPEATER_C");
			for(int i = 0 ; i < count ; i ++) {
				var contr = Se.getStringMs("REPEATER_C" + i);
				controllers.add(new Controller(contr[0],contr[1],contr[2].charAt(0) == 'S', contr[3].charAt(0) == 'S'));
			}
		} catch (EnumConstantNotPresentException e) {
		}
		addContr(controllers.size(), 0, 1, 1);
	}

	@Override
	protected void firstStep() {}

	@Override
	protected Controller getController(int numContr, int numPart) {
		if (controllers.size() > numContr)
			return controllers.get(numContr);
		else
			return null;
	}
	
	private void newControl() {
		var res = JOptionPane.showInputDialog(this,
				"Повторитель № " + (numKontr) + ", введите паттерн входного сигнала\n"
						+ "Формат строки:\n"
						+ "[S/H][Data]\n"
						+ "S - строка символов, Н - строка хексов\n"
						+ "Для строки хексов нужно записать только числа\n"
						+ "SStart - Будет ждать строку с текстом Start\n"
						+ "H00 FF 00 - Будет ждать строку с байтами 0х00 0хFF 0x00\n"
						+ "Строка может представлять собой регулярное выражение!");
		if(res == null) return;
		String in = res;
		res = JOptionPane.showInputDialog(this,
				"Повторитель № " + (numKontr) + ", введите паттерн вЫходного сигнала\n"
						+ "Формат строки:\n"
						+ "[S/H][Data]\n"
						+ "S - строка символов, Н - строка хексов\n"
						+ "Для строки хексов нужно записать только числа\n"
						+ "SStart - Будет посылать строку с текстом Start\n"
						+ "H00 FF 00 - Будет посылать строку с байтами 0х00 0хFF 0x00");
		if(res == null) return;
		String out = res;
		if(in.charAt(0) != 'S' && in.charAt(0) != 'H') return;
		if(out.charAt(0) != 'S' && out.charAt(0) != 'H') return;
		boolean in_String = in.charAt(0) == 'S';
		boolean out_String = out.charAt(0) == 'S';
		if(!in_String) in += " ";
		in = in.substring(1);
		out = out.substring(1);
		controllers.add(new Controller(in,out,in_String, out_String));
		addContr(controllers.size(), 0, 1, 1);
		regenerateController();
		
		Se.set("REPEATER_C", controllers.size());
		for(int i = 0 ; i < controllers.size() ; i ++) {
			String contr[] = new String[4];
			var c = controllers.get(i);
			contr[0] = c.in;
			contr[1] = c.out;
			contr[2] = c.in_String ? "S" : "H";
			contr[3] = c.out_String ? "S" : "H";
			Se.set("REPEATER_C" + i, contr);
		}
	}

	@Override
	protected void msgIn(String data_S, String string_H) {
		println("In" + data_S);
		println("In" + string_H);
		for(var i : controllers) {
			if(i.in_String && i.in.equals(data_S)) {
				if(i.out_String) writeString(i.out);
				else writeBytes(hexToStr(i.out));
				break;
			} else if(!i.in_String && i.in.equals(string_H)) {
				if(i.out_String) writeString(i.out);
				else writeBytes(hexToStr(i.out));
				break;
			} 
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	@Override
	protected void newInitComponents() {
	}// </editor-fold>//GEN-END:initComponents

	@Override
	protected void newStep() {
		regenerateControllerValue();
	}
}
